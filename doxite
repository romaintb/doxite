#!/usr/bin/env perl
# Copyright (c) 2010, Romain BERTRAND <romain@doxin.net>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


use strict;
use warnings;
use Template;
use Getopt::Long;
use File::Copy;
use POSIX qw(strftime);


my ($templatefile, $srcext, $destext, $outputcmd, $srcdir, $help, $version, $destdir) = ("template", "html", "html");

GetOptions(
	'sd|source-dir=s' => \$srcdir,
	'dd|dest-dir=s'   => \$destdir,
	'se|source-ext=s' => \$srcext,
	'de|dest-ext=s'   => \$destext,
	'o|output-cmd=s'  => \$outputcmd,
	't|template=s'    => \$templatefile,
	'v|version'       => \$version,
	'h|help'          => \$help,
);

version() if $version;
usage() if $help or !$srcdir or !$destdir;

my @tobeprocessed = ($srcdir);
process();


# sort filelist: folders first, then files
sub directoryfirst_sort {
	return -1 if(-d $a and ! -d $b);
	return  0 if((-d $a and -d $b) or (! -d $a and ! -d $b));
	return  1 if(! -d $a and -d $b);
}


sub process {
	foreach my $dir (@tobeprocessed) {
		foreach my $srcfile (sort directoryfirst_sort <$dir/*>) {
			(my $urlfile = $srcfile) =~ s/\.$srcext$/\.$destext/;
			my $destfile = $urlfile;
			$destfile =~ s/$srcdir/$destdir/;
			$urlfile =~ s/$srcdir//;

			push(@tobeprocessed, $srcfile) and next if( -d $srcfile );
			copy($srcfile, $destfile) and next if(  $srcfile !~ /\.$srcext$/ );

			if( $srcfile =~ /\.$srcext$/ ) {
				my @links;
				foreach(sort directoryfirst_sort <$dir/*>) {
					$_ .= "/" if (-d $_);
					$_ =~ s/$dir\///;
					push(@links, $_);
				}

				# first char is a /, which gives an empty element
				my @paths = split(/\//, substr($urlfile, 1));

				open(IN, "$srcfile");
				my $content = join(" ", <IN>);
				close(IN);

				# generation time/date
				my $mtime = strftime("%d %b %y", localtime((stat($srcfile))[9]));
				$mtime = $1 if $content =~ /\<\!--\[(.*)\]--\>/;

				# template processing
				my $data = {
					links => \@links,
					paths => \@paths,
					content => $content,
					mtime => $mtime,
				};

				my $template = Template->new({INCLUDE_PATH => "$srcdir"});
				$template->process("$templatefile", $data, "$destfile");
			}
		}
	}
}




sub version {
	print <<EOF;
doxite : v0.3b
EOF

	exit 0;
}


sub usage {
	print STDERR <<EOF;
Usage: doxite [options]

Options:
 -sd, --source-dir       Directory to process
 -dd, --dest-dir         Destination directory
 -se, --source-ext       Extension of sources files (default : html, optional)
 -de, --dest-ext         Extension of destination files (default : html, optional)
 -o,  --output-cmd       Command to output files (optional)
 -t,  --template         Template file (relative to your source-dir, default : 'template', optional)

 -h, --help             This help
 -v, --version          Display version number
EOF

	exit 2;
}

# vim: set ts=5:
